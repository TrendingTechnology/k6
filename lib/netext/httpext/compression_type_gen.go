// Code generated by "enumer -type=CompressionType -transform=snake -trimprefix CompressionType -output compression_type_gen.go"; DO NOT EDIT.

package httpext

import (
	"fmt"
	"strings"
)

const _CompressionTypeName = "gzipdeflatezstdbr"

var _CompressionTypeIndex = [...]uint8{0, 4, 11, 15, 17}

const _CompressionTypeLowerName = "gzipdeflatezstdbr"

func (i CompressionType) String() string {
	if i >= CompressionType(len(_CompressionTypeIndex)-1) {
		return fmt.Sprintf("CompressionType(%d)", i)
	}
	return _CompressionTypeName[_CompressionTypeIndex[i]:_CompressionTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _CompressionTypeNoOp() {
	var x [1]struct{}
	_ = x[CompressionTypeGzip-(0)]
	_ = x[CompressionTypeDeflate-(1)]
	_ = x[CompressionTypeZstd-(2)]
	_ = x[CompressionTypeBr-(3)]
}

var _CompressionTypeValues = []CompressionType{CompressionTypeGzip, CompressionTypeDeflate, CompressionTypeZstd, CompressionTypeBr}

var _CompressionTypeNameToValueMap = map[string]CompressionType{
	_CompressionTypeName[0:4]:        CompressionTypeGzip,
	_CompressionTypeLowerName[0:4]:   CompressionTypeGzip,
	_CompressionTypeName[4:11]:       CompressionTypeDeflate,
	_CompressionTypeLowerName[4:11]:  CompressionTypeDeflate,
	_CompressionTypeName[11:15]:      CompressionTypeZstd,
	_CompressionTypeLowerName[11:15]: CompressionTypeZstd,
	_CompressionTypeName[15:17]:      CompressionTypeBr,
	_CompressionTypeLowerName[15:17]: CompressionTypeBr,
}

var _CompressionTypeNames = []string{
	_CompressionTypeName[0:4],
	_CompressionTypeName[4:11],
	_CompressionTypeName[11:15],
	_CompressionTypeName[15:17],
}

// CompressionTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CompressionTypeString(s string) (CompressionType, error) {
	if val, ok := _CompressionTypeNameToValueMap[s]; ok {
		return val, nil
	}
	s = strings.ToLower(s)
	if val, ok := _CompressionTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to CompressionType values", s)
}

// CompressionTypeValues returns all values of the enum
func CompressionTypeValues() []CompressionType {
	return _CompressionTypeValues
}

// CompressionTypeStrings returns a slice of all String values of the enum
func CompressionTypeStrings() []string {
	strs := make([]string, len(_CompressionTypeNames))
	copy(strs, _CompressionTypeNames)
	return strs
}

// IsACompressionType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i CompressionType) IsACompressionType() bool {
	for _, v := range _CompressionTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
